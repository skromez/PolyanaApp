[{"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\App.tsx":"1","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\routes\\index.js":"2","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\routes.ts":"3","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\history.ts":"4","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\layout\\main-layout\\index.tsx":"5","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\index.tsx":"6","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\overlay-buttons\\index.tsx":"7","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\places-nearby\\places-nearby.tsx":"8","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\chat\\chat.tsx":"9"},{"size":223,"mtime":1607791975980,"results":"10","hashOfConfig":"11"},{"size":10476,"mtime":1607825080328,"results":"12","hashOfConfig":"11"},{"size":365,"mtime":1607832918861,"results":"13","hashOfConfig":"11"},{"size":89,"mtime":1607788614577,"results":"14","hashOfConfig":"11"},{"size":911,"mtime":1607832011592,"results":"15","hashOfConfig":"11"},{"size":219,"mtime":1607788215879,"results":"16","hashOfConfig":"11"},{"size":1374,"mtime":1607834096894,"results":"17","hashOfConfig":"11"},{"size":1576,"mtime":1607833803692,"results":"18","hashOfConfig":"11"},{"size":3034,"mtime":1607835350083,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mn0uqn",{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\App.tsx",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\routes\\index.js",["40","41","42","43","44","45","46"],"import React, {FC, useState} from 'react';\r\nimport {Button, Collapse, Drawer, Modal} from 'antd'\r\nimport {scaleLinear} from 'd3-scale'\r\nimport {useSwipeable} from \"react-swipeable\";\r\n\r\nimport wolfrock from '../../assets/images/wolf-rock.png'\r\nimport './styles.scss'\r\n\r\nconst { Panel } = Collapse;\r\n\r\nexport const Routes = () => {\r\n    const width = window.innerWidth\r\n    const height = 600\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [route, setRoute] = useState('');\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n\r\n    const handlers = useSwipeable({\r\n        onSwipedLeft: () => {\r\n            if (activeIndex === 0) {\r\n                setActiveIndex(nodesArray.length -1)\r\n            } else {\r\n                setActiveIndex(activeIndex - 1)\r\n            }\r\n        },\r\n        onSwipedRight: () => {\r\n            if (activeIndex === nodesArray.length - 1) {\r\n                setActiveIndex(0)\r\n            } else {\r\n                setActiveIndex(activeIndex + 1)\r\n            }\r\n        },\r\n        preventDefaultTouchmoveEvent: true,\r\n        trackMouse: true\r\n    });\r\n\r\n    const xScale = scaleLinear()\r\n        .domain([0, 100])\r\n        .range([0, width]);\r\n    const yScale = scaleLinear()\r\n        .domain([0, 100])\r\n        .range([0, height]);\r\n\r\n    const nodesArray = [\r\n           [\r\n               { x: 45, y: 15, route: 'остановка 6', black: true, dot: true, img: wolfrock },\r\n               { x: 35, y: 40, route: 'остановка 5', dot: true, img: wolfrock },\r\n               { x: 50, y: 62, route: 'остановка 4', transition: true, img: wolfrock },\r\n               { x: 60, y: 65, route:'остановка 3', img: wolfrock },\r\n               { x: 40, y: 85, route: 'остановка 2', white: true, transition: true, img: wolfrock },\r\n               { x: 33, y: 80, route: 'остановка 1', white: true, transition: true, img: wolfrock }\r\n           ],\r\n           [\r\n               { x: 45, y: 15, transition: true, black: true, route: 'остановка 5', img: wolfrock },\r\n               { x: 28, y: 5, black: true, route: 'остановка 4', img: wolfrock },\r\n               { x: 12, y: 37, route:'остановка 3', img: wolfrock },\r\n               { x: 23, y: 81, route: 'остановка 2', white: true, transition: true, img: wolfrock },\r\n               { x: 33, y: 80, route: 'остановка 1', white: true, img: wolfrock }\r\n           ]\r\n    ]\r\n\r\n    const linksArray = [\r\n        [\r\n            { s: 0, d: 1, time: 10 },\r\n            { s: 1, d: 2, time: 15 },\r\n            { s: 2, d: 3, time: 10 },\r\n            { s: 3, d: 4, time: 25 },\r\n            { s: 4, d: 5, time: 25 }\r\n        ],\r\n        [\r\n            { s: 0, d: 1, time: 10 },\r\n            { s: 1, d: 2, time: 15 },\r\n            { s: 2, d: 3, time: 10 },\r\n            { s: 3, d: 4, time: 25 },\r\n        ],\r\n    ]\r\n\r\n    const predictions = [\r\n        { time: 1, duration: 28},\r\n        { time: 2, duration: 43},\r\n        { time: 3, duration: 25},\r\n        { time: 4, duration: 13},\r\n    ]\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div {...handlers} className=\"map\">\r\n                {nodesArray.map((nodes, nodeIndex ) => (\r\n                    <svg\r\n                        key={nodeIndex}\r\n                        style={{zIndex: nodeIndex === activeIndex ? 5 : 1}}\r\n                        className='svg'\r\n                        width={width}\r\n                        height={height}\r\n                        viewBox={`0 0 ${width} ${height}`}\r\n                    >\r\n                        {linksArray[nodeIndex].map((link, i) => {\r\n                            let strokeColor = 'red'\r\n                            let strokeDash = 2;\r\n                            if (nodeIndex !== activeIndex) {\r\n                                strokeColor = '#ABAACF'\r\n                                strokeDash = 7;\r\n                            }\r\n                            return (\r\n                                <line\r\n                                    style={{zIndex: nodeIndex === activeIndex ? 5 : 0}}\r\n                                    key={i}\r\n                                    x1={xScale(nodes[link.s].x)}\r\n                                    x2={xScale(nodes[link.d].x)}\r\n                                    y1={yScale(nodes[link.s].y)}\r\n                                    y2={yScale(nodes[link.d].y)}\r\n                                    strokeDasharray={nodes[link.s].transition || nodeIndex === 0 && nodes[link.s].transition ? strokeDash : undefined}\r\n                                    strokeWidth={5}\r\n                                    stroke={strokeColor}\r\n                                />\r\n                            )\r\n                        })}\r\n                        {nodes.map((node, i) => {\r\n                            let fillColor = 'red'\r\n                            let strokeColor = 'red'\r\n                            let strokeWidth = 0\r\n                            if (node.white) {\r\n                                fillColor = 'white';\r\n                                strokeWidth = 8\r\n                            }\r\n                            if (node.black) {\r\n                                fillColor = '#433F6B';\r\n                                strokeWidth = 8\r\n                            }\r\n                            if (nodeIndex !== activeIndex) {\r\n                                strokeColor = '#C4C4C4'\r\n                                fillColor = 'white';\r\n                                strokeWidth = 8\r\n                            }\r\n                            return (\r\n                                <circle\r\n                                    style={{zIndex: nodeIndex === activeIndex ? 5 : 0}}\r\n                                    onClick={() => {\r\n                                        setIsOpen(true)\r\n                                        setRoute(node.route)\r\n                                    }}\r\n                                    key={i}\r\n                                    cx={xScale(node.x)}\r\n                                    cy={yScale(node.y)}\r\n                                    r=\"10\"\r\n                                    stroke={strokeColor}\r\n                                    strokeWidth={strokeWidth}\r\n                                    fill={fillColor}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </svg>\r\n                ))}\r\n            </div>\r\n            <div className=\"approximate-time\">\r\n                <div className=\"title\">{nodesArray[activeIndex][nodesArray[activeIndex].length - 1].route} - {nodesArray[activeIndex][0].route}</div>\r\n                <div className=\"time\">{linksArray[activeIndex].reduce((prev, curr) => prev + curr.time, 0)} мин</div>\r\n                {nodesArray[activeIndex].map((node) => (\r\n                    <div style={{position: \"absolute\", left: `${node.y}%`}} className=\"route-container\">\r\n                        <img className=\"route-icon\" src=\"https:/placehold.it/30x30\" alt=\"\"/>\r\n                        <span className=\"route-name\">{node.route}</span>\r\n                    </div>\r\n                ))}\r\n                <svg style={{marginTop: '100px'}} width=\"100%\" height=\"100px\">\r\n                    {linksArray[activeIndex].map((link, i) => (\r\n                        <>\r\n                            <text\r\n                                y={'10'}\r\n                                x={xScale((nodesArray[activeIndex][link.s].y + nodesArray[activeIndex][link.d].y) / 2)}\r\n                            >{link.time}</text>\r\n                            <line\r\n                                key={i}\r\n                                x1={xScale(nodesArray[activeIndex][link.s].y)}\r\n                                x2={xScale(nodesArray[activeIndex][link.d].y)}\r\n                                y1={50}\r\n                                y2={50}\r\n                                strokeDasharray={10}\r\n                                stroke={'white'}\r\n                            />\r\n                        </>\r\n                    ))}\r\n                    {nodesArray[activeIndex].map((node, i) => (\r\n                        <circle\r\n                            onClick={() => {\r\n                                setIsOpen(true)\r\n                                setRoute(node.route)\r\n                            }}\r\n                            key={i}\r\n                            cx={xScale(node.y)}\r\n                            cy={50}\r\n                            r=\"5\"\r\n                            fill={\"red\"}\r\n                        />\r\n                    ))}\r\n                </svg>\r\n            </div>\r\n            <div className=\"prediction\">\r\n                <span className=\"title\">Прогноз</span>\r\n                <div className=\"container\">\r\n                    {predictions.map((prediction) => (\r\n                        <div key={prediction.time} className=\"prediction__item item\">\r\n                            <span className=\"item__time\">{prediction.time} ч</span>\r\n                            <span className=\"item__duration\">{prediction.duration} мин</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <Collapse className=\"collapse\" expandIconPosition=\"right\" bordered={false}>\r\n                <Panel header={header()} key=\"1\">\r\n                    <div className=\"panel\">\r\n                        <div className=\"dashed-line\"></div>\r\n                        {nodesArray[activeIndex].map((node) => (\r\n                            <div className=\"panel__item\">\r\n                                <img src={node.img} alt=\"image\"/>\r\n                                <span>{node.route}</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Panel>\r\n            </Collapse>\r\n            <Drawer\r\n                placement={'bottom'}\r\n                closable={true}\r\n                onClose={() => setIsOpen(false)}\r\n                visible={isOpen}\r\n            >\r\n                <p>{route}</p>\r\n                <p>Куда</p>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst header = () => {\r\n    return (\r\n        <div className=\"live-photos\">\r\n            <img src=\"https://placehold.it/30x30\" alt=\"image\"/>\r\n            <p>Live фото подъемников</p>\r\n        </div>\r\n    )\r\n}","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\routes.ts",["47"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\history.ts",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\layout\\main-layout\\index.tsx",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\index.tsx",[],["48","49"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\overlay-buttons\\index.tsx",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\places-nearby\\places-nearby.tsx",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\chat\\chat.tsx",["50"],{"ruleId":"51","severity":1,"message":"52","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":2,"column":9,"nodeType":"53","messageId":"54","endLine":2,"endColumn":15},{"ruleId":"51","severity":1,"message":"56","line":2,"column":35,"nodeType":"53","messageId":"54","endLine":2,"endColumn":40},{"ruleId":"57","severity":1,"message":"58","line":112,"column":79,"nodeType":"59","messageId":"60","endLine":112,"endColumn":81},{"ruleId":"57","severity":1,"message":"58","line":112,"column":98,"nodeType":"59","messageId":"60","endLine":112,"endColumn":100},{"ruleId":"61","severity":1,"message":"62","line":214,"column":33,"nodeType":"63","endLine":214,"endColumn":66},{"ruleId":"61","severity":1,"message":"62","line":237,"column":13,"nodeType":"63","endLine":237,"endColumn":64},{"ruleId":"64","severity":1,"message":"65","line":2,"column":9,"nodeType":"53","messageId":"54","endLine":2,"endColumn":18},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":56,"column":33,"nodeType":"63","endLine":56,"endColumn":45},"no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Modal' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'PageLinks' is defined but never used.","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]