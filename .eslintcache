[{"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\App.tsx":"1","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\routes\\index.js":"2","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\routes.ts":"3","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\history.ts":"4","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\index.js":"5","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\overlay-buttons\\index.js":"6","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\utils\\axios.ts":"7","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\index.tsx":"8","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\chat\\index.tsx":"9","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\links.ts":"10","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\choose-track\\index.tsx":"11","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\places-nearby\\index.tsx":"12"},{"size":223,"mtime":1607791975980,"results":"13","hashOfConfig":"14"},{"size":11787,"mtime":1607869382098,"results":"15","hashOfConfig":"14"},{"size":772,"mtime":1607865711351,"results":"16","hashOfConfig":"14"},{"size":89,"mtime":1607788614577,"results":"17","hashOfConfig":"14"},{"size":842,"mtime":1607840756288,"results":"18","hashOfConfig":"14"},{"size":2541,"mtime":1607869258772,"results":"19","hashOfConfig":"14"},{"size":182,"mtime":1607856920865,"results":"20","hashOfConfig":"14"},{"size":262,"mtime":1607840787725,"results":"21","hashOfConfig":"14"},{"size":3131,"mtime":1607851467217,"results":"22","hashOfConfig":"14"},{"size":53,"mtime":1607832816131,"results":"23","hashOfConfig":"14"},{"size":715,"mtime":1607866273518,"results":"24","hashOfConfig":"14"},{"size":1587,"mtime":1607840141052,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mn0uqn",{"filePath":"29","messages":"30","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\App.tsx",[],["57","58"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\routes\\index.js",["59","60","61","62","63","64","65","66"],"import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Collapse, Drawer, Modal} from 'antd'\r\nimport {scaleLinear} from 'd3-scale'\r\nimport {useSwipeable} from \"react-swipeable\";\r\n\r\nimport wolfrock from '../../assets/images/wolfrock.jfif';\r\nimport kavexpress from '../../assets/images/kavexpress.jfif';\r\nimport tundra from '../../assets/images/tundra.jfif';\r\nimport driada from '../../assets/images/driada.jfif';\r\nimport kvartet from '../../assets/images/kvartet.jfif';\r\nimport podsadka from '../../assets/images/podsadka.jfif';\r\nimport beseda from '../../assets/images/beseda.jfif';\r\nimport diagram1 from '../../assets/images/diagram1.svg';\r\nimport diagram2 from '../../assets/images/diagram2.svg';\r\nimport diagram3 from '../../assets/images/diagram3.svg';\r\nimport diagram4 from '../../assets/images/diagram4.svg';\r\nimport camera from '../../assets/images/camera.svg';\r\nimport './styles.scss'\r\n\r\nconst { Panel } = Collapse;\r\n\r\nexport const Routes = () => {\r\n    const width = window.innerWidth\r\n    const height = 600\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [route, setRoute] = useState('');\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n\r\n\r\n    const handlers = useSwipeable({\r\n        onSwipedLeft: () => {\r\n            if (activeIndex === nodesArray.length - 1) {\r\n                setActiveIndex(0)\r\n            } else {\r\n                setActiveIndex(activeIndex + 1)\r\n            }\r\n        },\r\n        onSwipedRight: () => {\r\n            if (activeIndex === 0) {\r\n                setActiveIndex(nodesArray.length - 1)\r\n            } else {\r\n                setActiveIndex(activeIndex - 1)\r\n            }\r\n        },\r\n        preventDefaultTouchmoveEvent: true,\r\n        trackMouse: true\r\n    });\r\n\r\n    const xScale = scaleLinear()\r\n        .domain([0, 100])\r\n        .range([0, width]);\r\n    const yScale = scaleLinear()\r\n        .domain([0, 100])\r\n        .range([0, height]);\r\n\r\n    const nodesArray = [\r\n        [\r\n            { x: 45, y: 15, black: true, name: 'Роза Пик 2320м', img: wolfrock, noLive: true },\r\n            { x: 35, y: 40, name: 'Подсадка 1600м', dot: true, img: wolfrock, noLive: true },\r\n            { x: 50, y: 62, name: 'Кавказский экспресс 1350м', transition: true, img: kavexpress },\r\n            { x: 43, y: 60, name: 'Волчья Скала 1350м', img: wolfrock, noLive: true },\r\n            { x: 33, y: 80, name: 'Волчья Скала 940м', white: true, img: wolfrock }\r\n        ],\r\n        [\r\n            { x: 45, y: 15, name: 'Роза Пик 2320м', black: true, dot: true, img: wolfrock, noLive: true },\r\n            { x: 35, y: 40, name: 'Подсадка 1600м', img: wolfrock, noLive: true },\r\n            { x: 50, y: 62, name: 'Кавказский экспресс 1350м', transition: true, img: kavexpress },\r\n            { x: 60, y: 65, name: 'Беседа 1350м', img: wolfrock, noLive: true },\r\n            { x: 40, y: 85, name: 'Беседа 940м', white: true, transition: true, img: beseda },\r\n            { x: 33, y: 80, name: 'Волчья Скала 940м', white: true, transition: true, img: wolfrock, noLive: true }\r\n        ],\r\n        [\r\n            { x: 45, y: 15, name: 'Роза Пик 2320м', black: true, dot: true, img: wolfrock, noLive: true },\r\n            { x: 35, y: 40, name: 'Подсадка 1600м', transition: true, img: podsadka },\r\n            { x: 50, y: 47, name: 'Квартет 1600м', img: wolfrock, noLive: true },\r\n            { x: 63, y: 60, name: 'Квартет 1350м', transition: true, img: kvartet },\r\n            { x: 60, y: 65, name: 'Беседа 1350м', img: wolfrock, noLive: true },\r\n            { x: 40, y: 85, name: 'Беседа 940м', white: true, transition: true, img: beseda },\r\n            { x: 33, y: 80, name: 'Волчья Скала 940м', white: true, transition: true, img: wolfrock, noLive: true }\r\n        ],\r\n        [\r\n            { x: 45, y: 15, transition: true, black: true, name: 'Роза Пик 2320м', img: wolfrock, noLive: true },\r\n            { x: 28, y: 5, black: true, name: 'Тундра 2220м', img: wolfrock, noLive: true },\r\n            { x: 12, y: 37, name: 'Тундра 1645м', img: tundra },\r\n            { x: 23, y: 81, name: 'Дриада 940м', white: true, transition: true, img: driada },\r\n            { x: 33, y: 80, name: 'Волчья Скала 940м', white: true, img: wolfrock, noLive: true }\r\n        ],\r\n    ]\r\n\r\n        const diagramSvgArray = [\r\n            {\r\n                url: diagram2\r\n            },\r\n            {\r\n                url: diagram4\r\n            },\r\n            {\r\n                url: diagram1\r\n            },\r\n            {\r\n                url: diagram3\r\n            },\r\n        ]\r\n\r\n        const linksArray = [\r\n            [\r\n                { s: 0, d: 1, time: 10 },\r\n                { s: 1, d: 2, time: 15 },\r\n                { s: 2, d: 3, time: 5 },\r\n                { s: 3, d: 4, time: 15 },\r\n            ],\r\n            [\r\n                { s: 0, d: 1, time: 14 },\r\n                { s: 1, d: 2, time: 10 },\r\n                { s: 2, d: 3, time: 2 },\r\n                { s: 3, d: 4, time: 68 },\r\n                { s: 4, d: 5, time: 15 }\r\n            ],\r\n            [\r\n                { s: 0, d: 1, time: 10 },\r\n                { s: 1, d: 2, time: 1 },\r\n                { s: 2, d: 3, time: 7 },\r\n                { s: 3, d: 4, time: 8 },\r\n                { s: 4, d: 5, time: 25 },\r\n                { s: 5, d: 6, time: 25 },\r\n            ],\r\n            [\r\n                { s: 0, d: 1, time: 10 },\r\n                { s: 1, d: 2, time: 15 },\r\n                { s: 2, d: 3, time: 30 },\r\n                { s: 3, d: 4, time: 25 },\r\n            ],\r\n        ]\r\n\r\n        const durations = [59, 61, 109, 130]\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div {...handlers} className=\"map\">\r\n                    <div className=\"map__bullets\">\r\n                        {nodesArray.map((_, i) => {\r\n                            const className = `bullet ${activeIndex === i ? 'bullet--active' : ''}`\r\n                            return (\r\n                                <div className={className} />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    {nodesArray.map((nodes, nodeIndex ) => {\r\n                    return (\r\n                        <svg\r\n                            key={nodeIndex}\r\n                            style={{zIndex: nodeIndex === activeIndex ? 5 : 1}}\r\n                            className='svg'\r\n                            width={width}\r\n                            height={height}\r\n                            viewBox={`0 0 ${width} ${height}`}\r\n                        >\r\n                            {linksArray[nodeIndex].map((link, i) => {\r\n                                let strokeColor = 'red'\r\n                                let strokeDash = 2;\r\n                                if (nodeIndex !== activeIndex) {\r\n                                    strokeColor = '#ABAACF'\r\n                                    strokeDash = 7;\r\n                                }\r\n                                return (\r\n                                    <line\r\n                                        style={{zIndex: nodeIndex === activeIndex ? 5 : 0}}\r\n                                        key={i}\r\n                                        x1={xScale(nodes[link.s]?.x)}\r\n                                        x2={xScale(nodes[link.d]?.x)}\r\n                                        y1={yScale(nodes[link.s]?.y)}\r\n                                        y2={yScale(nodes[link.d]?.y)}\r\n                                        strokeDasharray={nodes[link.s]?.transition || nodeIndex === 0 && nodes[link.s]?.transition ? strokeDash : undefined}\r\n                                        strokeWidth={5}\r\n                                        stroke={strokeColor}\r\n                                    />\r\n                                )\r\n                            })}\r\n                            {nodes.map((node, i) => {\r\n                                let fillColor = 'red'\r\n                                let strokeColor = 'red'\r\n                                let strokeWidth = 0\r\n                                let radius = 10\r\n                                if (node.white) {\r\n                                    fillColor = 'white';\r\n                                    strokeWidth = 8\r\n                                }\r\n                                if (node.black) {\r\n                                    fillColor = '#433F6B';\r\n                                    strokeWidth = 8\r\n                                }\r\n                                if (nodeIndex !== activeIndex) {\r\n                                    strokeColor = '#C4C4C4'\r\n                                    fillColor = 'white';\r\n                                    strokeWidth = 6\r\n                                    radius = 7\r\n                                }\r\n                                return (\r\n                                    <circle\r\n                                        style={{zIndex: nodeIndex === activeIndex ? 5 : 0}}\r\n                                        onClick={() => {\r\n                                            setIsOpen(true)\r\n                                            setRoute(node.name)\r\n                                        }}\r\n                                        key={i}\r\n                                        cx={xScale(node.x)}\r\n                                        cy={yScale(node.y)}\r\n                                        r={radius}\r\n                                        stroke={strokeColor}\r\n                                        strokeWidth={strokeWidth}\r\n                                        fill={fillColor}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </svg>\r\n                    )\r\n                } )}\r\n            </div>\r\n            <div className=\"approximate-time\">\r\n                <img className=\"diagram-svg\" src={diagramSvgArray[activeIndex].url} alt=\"\"/>\r\n                <div className=\"title\">{nodesArray[activeIndex][nodesArray[activeIndex].length - 1].name} - {nodesArray[activeIndex][0].name}</div>\r\n                <div className={`time ${durations[activeIndex] > 100 ? 'time--red' : 'time--green'}`}>{durations[activeIndex]} мин</div>\r\n            </div>\r\n            <Collapse defaultActiveKey={['1']} className=\"collapse\" expandIconPosition=\"right\" bordered={false}>\r\n                <Panel header={header()} key=\"1\">\r\n                    <div className=\"panel\">\r\n                        <div className=\"dashed-line\"></div>\r\n                        {nodesArray[activeIndex].slice().reverse().filter(live => !live.noLive).map((node) => (\r\n                            <div className=\"panel__item\">\r\n                                <img src={node.img} alt=\"image\"/>\r\n                                <span>{node.name}</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Panel>\r\n            </Collapse>\r\n            <Drawer\r\n                placement={'bottom'}\r\n                closable={true}\r\n                className=\"drawer\"\r\n                onClose={() => setIsOpen(false)}\r\n                visible={isOpen}\r\n            >\r\n                <button className=\"button-checkin\">Check-In</button>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst header = () => {\r\n    return (\r\n        <div className=\"live-photos\">\r\n            <img src={camera} alt=\"camera\"/>\r\n            <p>Live фото подъемников</p>\r\n        </div>\r\n    )\r\n}","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\routes.ts",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\history.ts",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\index.js",["67","68","69","70"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\overlay-buttons\\index.js",["71","72","73"],"import React, {FC, useEffect, useState} from 'react';\r\nimport './styles.scss'\r\nimport {PageLinks} from \"../../router/links\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport const OverlayButtons = ({randomIndex}) => {\r\n    const history = useHistory()\r\n    const buttonsArray = [\r\n            {\r\n                color: '#FFE456',\r\n                text: 'Активности',\r\n                route: PageLinks.PLACES,\r\n            },\r\n            {\r\n                color: '#5754EB',\r\n                text: 'Чат',\r\n                route: '/chat'\r\n            },\r\n            {\r\n                color: 'white',\r\n                text: 'Горки',\r\n                route: '/'\r\n            },\r\n            {\r\n                color: '#FD3E3E',\r\n                text: 'Еда',\r\n                route: PageLinks.PLACES,\r\n            },\r\n        ];\r\n\r\n    const buttonsArray2 = [\r\n        {\r\n            color: '#FFE456',\r\n            text: 'Глинтвейн',\r\n            route: false\r\n        },\r\n        {\r\n            color: '#5754EB',\r\n            text: 'Баня',\r\n            route: false\r\n        },\r\n        {\r\n            color: 'white',\r\n            text: 'Играть',\r\n            route: false\r\n        },\r\n        {\r\n            color: '#FD3E3E',\r\n            text: 'Знакомства',\r\n            route: false\r\n        },\r\n    ];\r\n\r\n    const buttonsArray3 = [\r\n        {\r\n            color: '#FFE456',\r\n            text: 'Массаж',\r\n            route: false\r\n        },\r\n        {\r\n            color: '#5754EB',\r\n            text: 'В группу',\r\n            route: false\r\n        },\r\n        {\r\n            color: 'white',\r\n            text: 'История',\r\n            route: false\r\n        },\r\n        {\r\n            color: '#FD3E3E',\r\n            text: 'Продать очередь',\r\n            route: false\r\n        },\r\n    ];\r\n    const buttons = [buttonsArray, buttonsArray2, buttonsArray3]\r\n    return (\r\n        <div className=\"ant-modal-content\">\r\n            <div className=\"overlay\">\r\n                <div className=\"button-wrapper\"></div>\r\n                {buttons[randomIndex].map((button, i) => {\r\n                    return (\r\n                        <button onClick={() => history.push(button.route)} style={{ backgroundColor: `${button.color}`, transform: `rotate(${270 + (90 * i)}deg) translate(90px) rotate(-${270 + (90 * i)}deg)`}} key={i} className=\"button\">{button.text}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}",["74","75"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\utils\\axios.ts",[],["76","77"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\index.tsx",[],["78","79"],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\chat\\index.tsx",["80"],"import React, {FC} from 'react';\r\nimport './styles.scss'\r\nimport profilepic from '../../assets/images/profilepic.png'\r\nimport clock from '../../assets/images/clock.svg'\r\nimport human from '../../assets/images/human.svg'\r\nimport location from '../../assets/images/location.svg'\r\n\r\nexport const Chat: FC = () => {\r\n    const chatters = [\r\n        {\r\n            profilepic,\r\n            username: 'Анжела Иванова',\r\n            title: 'Rakamakafon',\r\n            location: 'Волчья Гора',\r\n            people: '5/10',\r\n            time: '20 min',\r\n            comment: 'Чуваки встречаемся на Волчей в 13:00, знакомимся и катаем'\r\n        },\r\n        {\r\n            profilepic,\r\n            username: 'Анжела Иванова',\r\n            title: 'Freeeeway',\r\n            location: 'Роза Хутор',\r\n            people: '1/10',\r\n            time: '20 min',\r\n            comment: 'Все кто радуется свободному пухляку встречаемся в 13:40.'\r\n        },\r\n        {\r\n            profilepic,\r\n            username: 'Анжела Иванова',\r\n            title: 'Rakamakafon',\r\n            location: 'Волчья Гора',\r\n            people: '5/10',\r\n            time: '20 min',\r\n            comment: 'Чуваки встречаемся на Волчей в 13:00, знакомимся и катаем'\r\n        },\r\n    ]\r\n    return (\r\n        <div className=\"chat\">\r\n            {chatters.map((chatter, i) => (\r\n                <div key={i} className=\"chat__wrapper\">\r\n                    <div className=\"chat__profile profile\">\r\n                        <img src={chatter.profilepic} alt=\"profilePic\" />\r\n                        <span className=\"profile__info\">{chatter.username}</span>\r\n                    </div>\r\n                    <div className=\"chat__container\">\r\n                        <span className=\"chat__topic\"></span>\r\n                        <ul className=\"chat__list list\">\r\n                            <li className=\"list__item\">\r\n                                <img src={location} alt=\"\"/>\r\n                                <span>{chatter.location}</span>\r\n                            </li>\r\n                            <li className=\"list__item list__item--link\">\r\n                                <img src={human} alt=\"\"/>\r\n                                <span>{chatter.people}</span>\r\n                                <a href=\"#\">Занять место</a>\r\n                            </li>\r\n                            <li className=\"list__item\">\r\n                                <img src={clock} alt=\"\"/>\r\n                                <span>{chatter.time}</span>\r\n                            </li>\r\n                        </ul>\r\n                        <span className=\"chat__topic\">– {chatter.comment}</span>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <button onClick={() => window.open('https://t.me/joinchat/CXHQeBnVmgPBa_4awc7WCA', '_blank')} className=\"chat__button\">Добавить в группу</button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\router\\links.ts",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\choose-track\\index.tsx",[],"C:\\Users\\aaerokhin\\Desktop\\hackathon\\polyana-react\\src\\components\\places-nearby\\index.tsx",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":1,"column":20,"nodeType":"87","messageId":"88","endLine":1,"endColumn":29},{"ruleId":"85","severity":1,"message":"90","line":2,"column":9,"nodeType":"87","messageId":"88","endLine":2,"endColumn":15},{"ruleId":"85","severity":1,"message":"91","line":2,"column":35,"nodeType":"87","messageId":"88","endLine":2,"endColumn":40},{"ruleId":"85","severity":1,"message":"92","line":26,"column":12,"nodeType":"87","messageId":"88","endLine":26,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":173,"column":84,"nodeType":"95","messageId":"96","endLine":173,"endColumn":86},{"ruleId":"93","severity":1,"message":"94","line":173,"column":103,"nodeType":"95","messageId":"96","endLine":173,"endColumn":105},{"ruleId":"97","severity":1,"message":"98","line":230,"column":33,"nodeType":"99","endLine":230,"endColumn":66},{"ruleId":"100","severity":1,"message":"101","line":3,"column":15,"nodeType":"87","messageId":"88","endLine":3,"endColumn":28},{"ruleId":"100","severity":1,"message":"102","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":15},{"ruleId":"100","severity":1,"message":"103","line":7,"column":9,"nodeType":"87","messageId":"88","endLine":7,"endColumn":19},{"ruleId":"100","severity":1,"message":"104","line":12,"column":11,"nodeType":"87","messageId":"88","endLine":12,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":1,"column":20,"nodeType":"87","messageId":"88","endLine":1,"endColumn":29},{"ruleId":"85","severity":1,"message":"105","line":1,"column":31,"nodeType":"87","messageId":"88","endLine":1,"endColumn":39},{"ruleId":"81","replacedBy":"106"},{"ruleId":"83","replacedBy":"107"},{"ruleId":"81","replacedBy":"108"},{"ruleId":"83","replacedBy":"109"},{"ruleId":"81","replacedBy":"106"},{"ruleId":"83","replacedBy":"107"},{"ruleId":"110","severity":1,"message":"111","line":56,"column":33,"nodeType":"99","endLine":56,"endColumn":45},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'route' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","'history' is defined but never used.","'MainLayout' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.",["112"],["113"],["112"],["113"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]